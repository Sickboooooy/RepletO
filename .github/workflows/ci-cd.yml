# 🚀 RepletO v2.0 - CI/CD Pipeline
# ================================

name: RepletO CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  release:
    types: [ published ]

env:
  PYTHON_VERSION: '3.11'
  NODE_VERSION: '18'
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}/repleto

jobs:
  # 🧪 Tests y Quality Checks
  test:
    name: 🧪 Tests & Quality
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.10', '3.11', '3.12']
    
    steps:
    - name: 📥 Checkout código
      uses: actions/checkout@v4
    
    - name: 🐍 Setup Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        cache: 'pip'
    
    - name: 📦 Instalar dependencias
      run: |
        python -m pip install --upgrade pip
        pip install -r backend/requirements.txt
        pip install pytest pytest-asyncio pytest-cov
    
    - name: 🎨 Verificar formato del código
      run: |
        pip install black isort
        black --check backend/
        isort --check-only backend/
    
    - name: 📊 Análisis estático con pylint
      run: |
        pip install pylint
        pylint backend/ --fail-under=8.0 || true
    
    - name: 🔍 Análisis de seguridad
      run: |
        pip install bandit safety
        bandit -r backend/ -f json -o bandit-report.json || true
        safety check --json --output safety-report.json || true
    
    - name: 🧪 Ejecutar tests con coverage
      run: |
        pytest tests/ --cov=backend --cov-report=xml --cov-report=html
    
    - name: 📊 Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
    
    - name: 📁 Subir artefactos de reports
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: test-reports-${{ matrix.python-version }}
        path: |
          coverage.xml
          htmlcov/
          bandit-report.json
          safety-report.json

  # 🏗️ Build y Test de Docker
  build:
    name: 🐳 Docker Build
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: 📥 Checkout código
      uses: actions/checkout@v4
    
    - name: 🐳 Setup Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: 🔑 Login al Container Registry
      if: github.event_name != 'pull_request'
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    
    - name: 📝 Extraer metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=sha,prefix=commit-
    
    - name: 🏗️ Build y Push imagen Docker
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./docker/Dockerfile
        push: ${{ github.event_name != 'pull_request' }}
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
    
    - name: 🧪 Test imagen Docker
      run: |
        docker run --rm -d --name repleto-test \
          -p 8000:8000 \
          ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
        
        # Esperar que el servicio esté listo
        for i in {1..30}; do
          if curl -f http://localhost:8000/health; then
            echo "✅ Servicio respondiendo correctamente"
            break
          fi
          echo "⏳ Esperando que el servicio esté listo... ($i/30)"
          sleep 2
        done
        
        # Limpiar
        docker stop repleto-test

  # 🚀 Deploy to Staging
  deploy-staging:
    name: 🚀 Deploy Staging
    runs-on: ubuntu-latest
    needs: [test, build]
    if: github.ref == 'refs/heads/develop'
    environment: staging
    
    steps:
    - name: 📥 Checkout código
      uses: actions/checkout@v4
    
    - name: 🚀 Deploy to staging
      run: |
        echo "🚀 Deploying to staging environment..."
        # Aquí iría la lógica de deploy específica
        # Por ejemplo: kubectl, docker-compose, etc.
    
    - name: 🧪 Tests de integración
      run: |
        echo "🧪 Running integration tests on staging..."
        # Aquí irían los tests de integración

  # 🌟 Deploy to Production
  deploy-production:
    name: 🌟 Deploy Production
    runs-on: ubuntu-latest
    needs: [test, build]
    if: github.event_name == 'release'
    environment: production
    
    steps:
    - name: 📥 Checkout código
      uses: actions/checkout@v4
    
    - name: 🌟 Deploy to production
      run: |
        echo "🌟 Deploying to production environment..."
        # Aquí iría la lógica de deploy a producción
    
    - name: 📊 Post-deploy monitoring
      run: |
        echo "📊 Setting up post-deploy monitoring..."
        # Configurar monitoring post-deploy

  # 📦 Release artifacts
  release:
    name: 📦 Create Release
    runs-on: ubuntu-latest
    needs: [test, build]
    if: github.event_name == 'release'
    
    steps:
    - name: 📥 Checkout código
      uses: actions/checkout@v4
    
    - name: 🐍 Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: 📦 Crear distribución
      run: |
        pip install build twine
        python -m build
    
    - name: 📦 Upload release assets
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ github.event.release.upload_url }}
        asset_path: ./dist/
        asset_name: repleto-v2-dist.tar.gz
        asset_content_type: application/gzip

  # 🔍 Security Scan
  security:
    name: 🔒 Security Scan
    runs-on: ubuntu-latest
    if: github.event_name == 'push'
    
    steps:
    - name: 📥 Checkout código
      uses: actions/checkout@v4
    
    - name: 🔍 Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
    
    - name: 📊 Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: 'trivy-results.sarif'

  # 📝 Documentation
  docs:
    name: 📝 Build Docs
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: 📥 Checkout código
      uses: actions/checkout@v4
    
    - name: 🐍 Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: 📚 Build documentation
      run: |
        pip install mkdocs mkdocs-material
        mkdocs build
    
    - name: 🚀 Deploy to GitHub Pages
      uses: peaceiris/actions-gh-pages@v3
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        publish_dir: ./site
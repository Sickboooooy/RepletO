#!/usr/bin/env python3
"""
RepletO Frontend Server
Servidor HTTP simple para servir el frontend en el puerto 3000
"""

import http.server
import socketserver
import os
import sys
import webbrowser
from pathlib import Path

# Configuraci√≥n del servidor
PORT = 3000
HOST = "127.0.0.1"
FRONTEND_DIR = "frontend"

class RepletOHTTPRequestHandler(http.server.SimpleHTTPRequestHandler):
    """Handler personalizado para el servidor RepletO"""
    
    def __init__(self, *args, **kwargs):
        super().__init__(*args, directory=FRONTEND_DIR, **kwargs)
    
    def end_headers(self):
        # Agregar headers de seguridad y CORS
        self.send_header('Access-Control-Allow-Origin', '*')
        self.send_header('Access-Control-Allow-Methods', 'GET, POST, OPTIONS')
        self.send_header('Access-Control-Allow-Headers', 'Content-Type')
        self.send_header('Cache-Control', 'no-cache, no-store, must-revalidate')
        self.send_header('Pragma', 'no-cache')
        self.send_header('Expires', '0')
        super().end_headers()
    
    def do_OPTIONS(self):
        # Manejar preflight requests de CORS
        self.send_response(200)
        self.end_headers()
    
    def log_message(self, format, *args):
        # Personalizar logs del servidor
        timestamp = self.log_date_time_string()
        print(f"[{timestamp}] {format % args}")

def check_frontend_directory():
    """Verifica que el directorio frontend existe y tiene los archivos necesarios"""
    frontend_path = Path(FRONTEND_DIR)
    
    if not frontend_path.exists():
        print(f"‚ùå Error: El directorio '{FRONTEND_DIR}' no existe")
        print(f"   Aseg√∫rate de ejecutar este script desde el directorio ra√≠z del proyecto")
        return False
    
    index_file = frontend_path / "index.html"
    if not index_file.exists():
        print(f"‚ùå Error: No se encuentra 'index.html' en '{FRONTEND_DIR}'")
        return False
    
    # Verificar archivos importantes
    important_files = [
        "css/styles.css",
        "js/main.js",
        "js/api.js",
        "js/editor.js"
    ]
    
    missing_files = []
    for file in important_files:
        if not (frontend_path / file).exists():
            missing_files.append(file)
    
    if missing_files:
        print(f"‚ö†Ô∏è  Advertencia: Faltan algunos archivos:")
        for file in missing_files:
            print(f"   - {file}")
        print("   El frontend puede no funcionar correctamente")
    
    return True

def start_server():
    """Inicia el servidor HTTP para el frontend"""
    
    # Verificar directorio frontend
    if not check_frontend_directory():
        sys.exit(1)
    
    # Cambiar al directorio del script
    script_dir = Path(__file__).parent.absolute()
    os.chdir(script_dir)
    
    try:
        # Crear servidor
        with socketserver.TCPServer((HOST, PORT), RepletOHTTPRequestHandler) as httpd:
            server_url = f"http://{HOST}:{PORT}"
            
            print("üöÄ RepletO Frontend Server")
            print("=" * 50)
            print(f"üìÅ Sirviendo: {Path(FRONTEND_DIR).absolute()}")
            print(f"üåê URL: {server_url}")
            print(f"üì° Backend: http://127.0.0.1:8000")
            print("=" * 50)
            print("üí° Consejos:")
            print("   ‚Ä¢ Aseg√∫rate de que el backend est√© corriendo en el puerto 8000")
            print("   ‚Ä¢ Usa Ctrl+C para detener el servidor")
            print("   ‚Ä¢ El navegador deber√≠a abrirse autom√°ticamente")
            print("=" * 50)
            
            # Intentar abrir el navegador autom√°ticamente
            try:
                print(f"üåê Abriendo navegador en {server_url}...")
                webbrowser.open(server_url)
            except Exception as e:
                print(f"‚ö†Ô∏è  No se pudo abrir el navegador autom√°ticamente: {e}")
                print(f"   Abre manualmente: {server_url}")
            
            print(f"\nüéØ Servidor iniciado. Presiona Ctrl+C para detener...")
            
            # Iniciar servidor
            httpd.serve_forever()
            
    except KeyboardInterrupt:
        print("\n\nüõë Servidor detenido por el usuario")
        print("üëã ¬°Gracias por usar RepletO!")
        
    except PermissionError:
        print(f"‚ùå Error: No se puede usar el puerto {PORT}")
        print("   Prueba con un puerto diferente o ejecuta como administrador")
        sys.exit(1)
        
    except OSError as e:
        if "Address already in use" in str(e):
            print(f"‚ùå Error: El puerto {PORT} ya est√° en uso")
            print("   Det√©n el otro servidor o usa un puerto diferente")
        else:
            print(f"‚ùå Error del sistema operativo: {e}")
        sys.exit(1)
        
    except Exception as e:
        print(f"‚ùå Error inesperado: {e}")
        sys.exit(1)

def main():
    """Funci√≥n principal"""
    print("üîß Iniciando RepletO Frontend Server...")
    
    # Verificar versi√≥n de Python
    if sys.version_info < (3, 6):
        print("‚ùå Error: Se requiere Python 3.6 o superior")
        sys.exit(1)
    
    # Mostrar informaci√≥n del sistema
    print(f"üêç Python: {sys.version.split()[0]}")
    print(f"üìÇ Directorio: {os.getcwd()}")
    
    # Iniciar servidor
    start_server()

if __name__ == "__main__":
    main()